/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.shortrip.boozaa.apps.generator;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLConnection;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import sun.misc.Resource;

/**
 *
 * @author david
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();
        //ComboStartup.addItem("STARTUP");
        //ComboStartup.addItem("POSTWORLD");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPanel2 = new javax.swing.JPanel();
        txtPlugin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPackage = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtVersion = new javax.swing.JTextField();
        txtAuteur = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        checkDatabase = new javax.swing.JCheckBox();
        checkCache = new javax.swing.JCheckBox();
        ComboStartup = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        chekcDownloadRB = new javax.swing.JCheckBox();
        progressBar = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        checkVault = new javax.swing.JCheckBox();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bukkit Plugin Generator");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        txtPlugin.setText("PluginName");
        txtPlugin.setToolTipText("ex: PluginName");

        jLabel3.setText("Package :");
        jLabel3.setToolTipText("");

        jLabel2.setText("Nom du plugin :");
        jLabel2.setToolTipText("");

        txtPackage.setText("tld.domain.me.plugins.pluginname");
        txtPackage.setToolTipText("ex: tld.domain.me.plugins.pluginname");
        txtPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPackageActionPerformed(evt);
            }
        });

        jLabel6.setText("Version :");
        jLabel6.setToolTipText("ex: 0.1");

        txtVersion.setText("1.0");
        txtVersion.setToolTipText("ex: 0.1");

        txtAuteur.setText("me");
        txtAuteur.setToolTipText("ex: me");

        jLabel4.setText("Auteur :");
        jLabel4.setToolTipText("");

        checkDatabase.setSelected(true);
        checkDatabase.setText("Avec Base de données");

        checkCache.setSelected(true);
        checkCache.setText("Avec Système de cache");

        ComboStartup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "STARTUP", "POSTWORLD" }));

        jLabel1.setText("Phase de chargement du plugin:");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAuteur, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtPackage)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtPlugin, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComboStartup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(checkCache, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPlugin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(txtAuteur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkDatabase)
                    .addComponent(checkCache))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboStartup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Générer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        chekcDownloadRB.setText("CraftBukkit");

        jLabel5.setText("Téléchargement dans lib/ :");

        checkVault.setText("Vault");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addComponent(jButton1))
                            .addComponent(jLabel5))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(chekcDownloadRB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkVault)
                        .addGap(175, 175, 175))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chekcDownloadRB)
                    .addComponent(checkVault))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-373)/2, (screenSize.height-331)/2, 373, 331);
    }// </editor-fold>//GEN-END:initComponents

    private void txtPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPackageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPackageActionPerformed

    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
                
        try {
            
            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(plugName + ".zip")));
            byte[] data = new byte[1000];
            int count;            
            InputStream in = null;
            
            
            // Progressbar
            progressBar.setMaximum(10);
            progressBar.setValue(0);
            
            // Main.java
            in = new FileInputStream( makeMainClass() );
            out.putNextEntry(new ZipEntry(plugName + "/src/main/java/" + pack.replace(".", "/") + "/" + plugName + ".java"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(1);
            
            
            // plugin.yml
            in = new FileInputStream( makepluginYML() );        
            out.putNextEntry(new ZipEntry(plugName + "/src/main/resources/plugin.yml"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(2);
                        
            // pom/xml
            in = new FileInputStream( makePOM() );        
            out.putNextEntry(new ZipEntry(plugName + "/pom.xml"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(3);
            
            // Configuration.java
            in = new FileInputStream( makeConfiguration() );         
            out.putNextEntry(new ZipEntry(plugName + "/src/main/java/" + pack.replace(".", "/") + "/" +"persistence/Configuration.java"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(4);
            
            // Cache.java
            in = new FileInputStream( makeCache() );            
            out.putNextEntry(new ZipEntry(plugName + "/src/main/java/" + pack.replace(".", "/") + "/" +"persistence/Cache.java"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(5);
            
            // Database.java
            in = new FileInputStream( makeDatabase() );            
            out.putNextEntry(new ZipEntry(plugName + "/src/main/java/" + pack.replace(".", "/") + "/" +"persistence/Database.java"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(6);
            
            // SQLOperations.java
            in = new FileInputStream( makeSQLOperations() );       
            out.putNextEntry(new ZipEntry(plugName + "/src/main/java/" + pack.replace(".", "/") + "/" +"persistence/SQLOperations.java"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(7);
            
            // SQLTYPE.java
            in = new FileInputStream( makeSQLType() );            
            out.putNextEntry(new ZipEntry(plugName + "/src/main/java/" + pack.replace(".", "/") + "/" +"persistence/SQLTYPE.java"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(8);
            
            
            
            // MyPlayerListener.java
            in = new FileInputStream( makePlayerListener() );            
            out.putNextEntry(new ZipEntry(plugName + "/src/main/java/" + pack.replace(".", "/") + "/" +"listeners/MyPlayerListener.java"));
            while((count = in.read(data,0,1000)) != -1)
            {  
                out.write(data, 0, count);
            }
            progressBar.setValue(9);
            
            
            // CraftBukkit RB download
            if( chekcDownloadRB.isSelected()){
                // lib
                URL website = new URL("http://dl.bukkit.org/latest-rb/craftbukkit.jar");
                final ReadableByteChannel rbc = Channels.newChannel(website.openStream());
                File temp = File.createTempFile("tempfile", ".tmp");
                final FileOutputStream fos = new FileOutputStream(temp);
                fos.getChannel().transferFrom(rbc, 0, 1 << 24);
                
                in = new FileInputStream( temp );
                out.putNextEntry(new ZipEntry(plugName + "/src/main/lib/craftbukkit.jar"));            
                while((count = in.read(data,0,1000)) != -1)
                {  
                    out.write(data, 0, count);
                }                
            }
            progressBar.setValue(10);
            
            /*
             * Vault
             * http://dev.bukkit.org/media/files/614/520/Vault.jar
             * 
             * 
             */
            if( checkVault.isSelected()){
                // lib
                URL website = new URL("http://dev.bukkit.org/media/files/614/520/Vault.jar");
                final ReadableByteChannel rbc = Channels.newChannel(website.openStream());
                File temp = File.createTempFile("tempfile", ".tmp");
                final FileOutputStream fos = new FileOutputStream(temp);
                fos.getChannel().transferFrom(rbc, 0, 1 << 24);
                
                in = new FileInputStream( temp );
                out.putNextEntry(new ZipEntry(plugName + "/src/main/lib/Vault.jar"));            
                while((count = in.read(data,0,1000)) != -1)
                {  
                    out.write(data, 0, count);
                }                
            }
            progressBar.setValue(10);
            

            
            in.close();
            out.flush();
            out.close();
            
            System.out.println("Your file is zipped");
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    private File makeMainClass(){
       
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        InputStream main = getClass().getClassLoader().getResourceAsStream("resources/Main.txt");
        File temp = null;
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(main));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%pack%", pack);                
                
                strLine = strLine.replace("%configurationImport%", "import " + pack + ".persistence.Configuration;");
                
                strLine = strLine.replace("%listenersImport%", "import " + pack + ".listeners.*;");
                
                strLine = strLine.replace("%plugName%", plugName);                
                
                strLine = strLine.replace("%configurationStatic%", "private static Configuration configuration;" + System.getProperty( "line.separator" ) + 
                        "\tpublic static Configuration getConfiguration(){return configuration;}" + System.getProperty( "line.separator" ));
                
                strLine = strLine.replace("%configurationInstance%", "/*"+ System.getProperty( "line.separator" ) +"\t\t* Yaml Configuration" + System.getProperty( "line.separator" ) +
                        "\t\t* This line load the config.yml from the plugin folder" + System.getProperty( "line.separator" ) +
                        "\t\t*/" + System.getProperty( "line.separator" ) +
                        "\t\tloadConfig();" + System.getProperty( "line.separator" ) );
                
                strLine = strLine.replace("%configurationStaticStop%", "configuration = null;");
                
                
                // Avec le cache
                if( checkCache.isSelected() ){
                    
                    strLine = strLine.replace("%cacheImport%", "import " + pack + ".persistence.Cache;");
                    strLine = strLine.replace("%cacheStatic%", "private static Cache cache;" + System.getProperty( "line.separator" ) + "\tpublic static Cache getCache(){return cache;}" + System.getProperty( "line.separator" ));
                    strLine = strLine.replace("%cacheInstance%", "/*"+ System.getProperty( "line.separator" ) +"\t\t* Cache Map" + System.getProperty( "line.separator" ) +
                        "\t\t* To cache an object : " + plugName + ".getCache().add(String id, Object data)" + System.getProperty( "line.separator" ) +
                        "\t\t* To retrieve this object use getter method ex: " + plugName + ".getCache().getBoolean(id)" + System.getProperty( "line.separator" ) +
                        "\t\t*/" + System.getProperty( "line.separator" ) +
                        "\t\tcache = new Cache();" + System.getProperty( "line.separator" ));
                    strLine = strLine.replace("%cacheStaticStop%", "cache = null;");                    
                    
                }else{
                    
                    strLine = strLine.replace("%cacheImport%", "");
                    strLine = strLine.replace("%cacheStatic%", "");
                    strLine = strLine.replace("%cacheInstance%", "");
                    strLine = strLine.replace("%cacheStaticStop%", "");
                    
                }
                
                
                
                
                // Avec Database
                if( checkDatabase.isSelected() ){
                    
                    strLine = strLine.replace("%databaseStatic%", "private static Database database;" + System.getProperty( "line.separator" ) + "\tpublic static Database getDB(){return database;}" + System.getProperty( "line.separator" ));
                    
                    strLine = strLine.replace("%databaseImport%", "import " + pack + ".persistence.Database;");
                    
                    strLine = strLine.replace("%databaseInstance%", "/*"+ System.getProperty( "line.separator" ) +"\t\t* You can connect to MySQL too" + System.getProperty( "line.separator" ) +
                        "\t\t* To do that replace Database( new File( configuration.getString(\"database.sqlite.file\") ) " + System.getProperty( "line.separator" ) +
                        "\t\t* by Database( configuration.getString(\"database.mysql.server\"), configuration.getString(\"database.mysql.database\"), configuration.getString(\"database.mysql.username\"), configuration.getString(\"database.mysql.password\") );" + System.getProperty( "line.separator" ) +
                        "\t\t* And set your config in the generated config.yml" +
                        "\t\t*/" + System.getProperty( "line.separator" ) +
                        "\t\tdatabase = new Database( new File( configuration.getString(\"database.sqlite.file\") ));");
                    
                    strLine = strLine.replace("%databaseStaticStop%", "database = null;");
                    
                    String loadconfig = "private void loadConfig(){\n" +
                    "        \n" +
                    "        String configPath = getDataFolder() + File.separator + \"config.yml\";\n" +
                    "        configuration = new Configuration(configPath);\n" +
                    "		\n" +
                    "    	List<String> messages = new ArrayList<String>();\n" +
                    "    	Boolean updated = false;\n" +
                    "    	    	\n" +
                    "    	if( !configuration.exists() ){ configuration.save();}    		   				\n" +
                    "    		\n" +
                    "    	configuration.load();\n" +
                    "	\n" +
                    "        // Create a version node in the config.yml\n" +
                    "        if( configuration.get(\"config.version\") == null ) {    			\n" +
                    "            // Doesn't exist so create it and store as new\n" +
                    "        	configuration.set(\"config.version\", (String)getDescription().getVersion());\n" +
                    "            updated = true;\n" +
                    "            messages.add(\"config.version - the version of the config\");\n" +
                    "        }else{\n" +
                    "            // Exists so check with current version\n" +
                    "            String version = configuration.getString(\"config.version\");\n" +
                    "            if( !getDescription().getVersion().equalsIgnoreCase(version) ){\n" +
                    "            	configuration.set(\"config.version\", (String)getDescription().getVersion());   \n" +
                    "                updated = true;\n" +
                    "                messages.add(\"config.version - updated\");\n" +
                    "            }					\n" +
                    "        }\n" +
                    "\n" +
                    "\n" +
                    "        // Database MySQL\n" +
                    "        if( configuration.get(\"database.mysql.enabled\") == null  ) {\n" +
                    "        	configuration.set(\"database.mysql.enabled\", 	(Boolean)false);\n" +
                    "        	configuration.set(\"database.mysql.server\", 	(String)\"localhost\");\n" +
                    "        	configuration.set(\"database.mysql.database\", 	(String)\"minecraft\");\n" +
                    "        	configuration.set(\"database.mysql.username\", 	(String)\"admin\");\n" +
                    "        	configuration.set(\"database.mysql.password\", 	(String)\"123456\");\n" +
                    "            updated = true;\n" +
                    "            messages.add(\"database.mysql - Enable or not storing on MySQL database\");\n" +
                    "        }\n" +
                    "\n" +
                    "\n" +
                    "\n" +
                    "        // Database SQLite\n" +
                    "        if( configuration.get(\"database.sqlite.enabled\") == null  ) {\n" +
                    "            String dbFile = getDataFolder() + File.separator + \"" + txtPlugin.getText() + ".db\";\n" +
                    "            configuration.set(\"database.sqlite.enabled\", 	(Boolean)true);			\n" +
                    "            configuration.set(\"database.sqlite.file\", 		(String)dbFile);\n" +
                    "            updated = true;\n" +
                    "            messages.add(\"database.sqlite - Enable or not storing on SQLite database (default)\");\n" +
                    "        }\n" +
                    "\n" +
                    "\n" +
                    "        if( updated ) {	\n" +
                    "        	configuration.save();\n" +
                    "        	configuration.load();\n" +
                    "            this.getLogger().log(Level.INFO, \"- Config - \" + getName() + \" \" + getDescription().getVersion() + \" config.yml - new options\");\n" +
                    "            for(String str : messages){\n" +
                    "                this.getLogger().log(Level.INFO, \"- Config - \" + str);\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "        \n" +
                    "\n" +
                    "    }";
                    strLine = strLine.replace("%loadConfig%", loadconfig);

                }else{

                    strLine = strLine.replace("%databaseImport%", "");
                    strLine = strLine.replace("%databaseStatic%", "");
                    strLine = strLine.replace("%databaseInstance%", "");
                    strLine = strLine.replace("%databaseStaticStop%", "");
                    
                    String loadconfig = "private void loadConfig(){\n" +
                    "        \n" +
                    "        String configPath = getDataFolder() + File.separator + \"config.yml\";\n" +
                    "        configuration = new Configuration(configPath);\n" +
                    "		\n" +
                    "    	List<String> messages = new ArrayList<String>();\n" +
                    "    	Boolean updated = false;\n" +
                    "    	    	\n" +
                    "    	if( !configuration.exists() ){ configuration.save();}    		   				\n" +
                    "    		\n" +
                    "    	configuration.load();\n" +
                    "	\n" +
                    "        // Create a version node in the config.yml\n" +
                    "        if( configuration.get(\"config.version\") == null ) {    			\n" +
                    "            // Doesn't exist so create it and store as new\n" +
                    "        	configuration.set(\"config.version\", (String)getDescription().getVersion());\n" +
                    "            updated = true;\n" +
                    "            messages.add(\"config.version - the version of the config\");\n" +
                    "        }else{\n" +
                    "            // Exists so check with current version\n" +
                    "            String version = configuration.getString(\"config.version\");\n" +
                    "            if( !getDescription().getVersion().equalsIgnoreCase(version) ){\n" +
                    "            	configuration.set(\"config.version\", (String)getDescription().getVersion());   \n" +
                    "                updated = true;\n" +
                    "                messages.add(\"config.version - updated\");\n" +
                    "            }					\n" +
                    "        }\n" +
                    "\n" +
                    "        if( updated ) {	\n" +
                    "        	configuration.save();\n" +
                    "        	configuration.load();\n" +
                    "            this.getLogger().log(Level.INFO, \"- Config - \" + getName() + \" \" + getDescription().getVersion() + \" config.yml - new options\");\n" +
                    "            for(String str : messages){\n" +
                    "                this.getLogger().log(Level.INFO, \"- Config - \" + str);\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "        \n" +
                    "\n" +
                    "    }";
                    strLine = strLine.replace("%loadConfig%", loadconfig);
                }
                
                
                if( !checkVault.isSelected()){
                    
                    strLine = strLine.replace("%vaultImport%", "");
                    strLine = strLine.replace("%vaultStatic%", "");
                    strLine = strLine.replace("%vaultInstance%", "");
                    strLine = strLine.replace("%vaultStaticStop%", "");
                    
                    
                }else{
                    
                    strLine = strLine.replace("%vaultImport%",  "import net.milkbowl.vault.economy.Economy;" +
                                                                System.getProperty( "line.separator" ) + 
                                                                "import net.milkbowl.vault.permission.Permission;");
                    
                    strLine = strLine.replace("%vaultStatic%",  "// Vault economy" +
                                                                System.getProperty( "line.separator" ) +
                                                                "\tprivate static Economy econ = null;" +
                                                                System.getProperty( "line.separator" ) +
                                                                "\tpublic static Economy getEcon(){return econ;}" +
                                                                System.getProperty( "line.separator" ) +
                                                                System.getProperty( "line.separator" ) +
                                                                "\t// Vault perms" +
                                                                System.getProperty( "line.separator" ) +
                                                                "\tprivate static Permission perms = null;" +
                                                                System.getProperty( "line.separator" ) +
                                                                "\tpublic static Permission getPerms(){return perms;}");
                    
                    strLine = strLine.replace("%vaultInstance%",    System.getProperty( "line.separator" ) +
                                                                    "\t\t// Hook Economy" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\tRegisteredServiceProvider<Economy> economyProvider = getServer().getServicesManager().getRegistration(net.milkbowl.vault.economy.Economy.class);" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\tif (economyProvider != null) {" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\t\tecon = economyProvider.getProvider();" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\t}" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\t// Hook Permissions" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\tRegisteredServiceProvider<Permission> permissionProvider = getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\tif (permissionProvider != null) {" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\t\tperms = permissionProvider.getProvider();" +
                                                                    System.getProperty( "line.separator" ) +
                                                                    "\t\t}");
                    
                    
                    strLine = strLine.replace("%vaultStaticStop%", "econ = null;" + System.getProperty( "line.separator" ) + "\t\tperms = null;");
                    
                }
                
                

                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makepluginYML(){
        
        InputStream pluginYML = getClass().getClassLoader().getResourceAsStream("resources/plugin.yml");
        String auteur = txtAuteur.getText();
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        String version = txtVersion.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(pluginYML));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%auteur%", auteur);
                strLine = strLine.replace("%pack%", pack);
                strLine = strLine.replace("%version%", version);
                strLine = strLine.replace("%plugName%", plugName);
                strLine = strLine.replace("%startup%", ComboStartup.getSelectedItem().toString());
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makePOM(){
        
        InputStream pom = getClass().getClassLoader().getResourceAsStream("resources/pom.xml");
        String auteur = txtAuteur.getText();
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        String version = txtVersion.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(pom));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%auteur%", auteur);
                strLine = strLine.replace("%pack%", pack);
                strLine = strLine.replace("%version%", version);
                strLine = strLine.replace("%plugName%", plugName);
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makeConfiguration(){
        
        InputStream configuration = getClass().getClassLoader().getResourceAsStream("resources/persistence/Configuration.txt");
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(configuration));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%pack%", pack + ".persistence");
                strLine = strLine.replace("%plugName%", plugName);
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makeCache(){
        
        InputStream cache = getClass().getClassLoader().getResourceAsStream("resources/persistence/Cache.txt");
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(cache));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%pack%", pack + ".persistence");
                strLine = strLine.replace("%plugName%", plugName);
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makeDatabase(){
        
        InputStream database = getClass().getClassLoader().getResourceAsStream("resources/persistence/Database.txt");
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(database));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%pack%", pack + ".persistence");
                strLine = strLine.replace("%plugName%", plugName);
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makeSQLOperations(){
        
        InputStream sqloperations = getClass().getClassLoader().getResourceAsStream("resources/persistence/SQLOperations.txt");
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(sqloperations));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%pack%", pack + ".persistence");
                strLine = strLine.replace("%plugName%", plugName);
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makeSQLType(){
        
        InputStream sqltype = getClass().getClassLoader().getResourceAsStream("resources/persistence/SQLTYPE.txt");
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(sqltype));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%pack%", pack + ".persistence");
                strLine = strLine.replace("%plugName%", plugName);
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }
    
    
    private File makePlayerListener(){
        
        InputStream playerListener = getClass().getClassLoader().getResourceAsStream("resources/listeners/MyPlayerListener.txt");
        String pack = txtPackage.getText();
        String plugName = txtPlugin.getText();
        File temp = null;
        
        try {
            //create a temp file
            temp = File.createTempFile("tempfile", ".tmp");
            FileWriter fstream = new FileWriter(temp, true);
            BufferedWriter fbw = new BufferedWriter(fstream);

            BufferedReader br = new BufferedReader(new InputStreamReader(playerListener));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.replace("%pack%", pack + ".listeners");
                strLine = strLine.replace("%plugName%", plugName);
                fbw.write(strLine + System.getProperty( "line.separator" ));
            }

            fbw.flush();
            fstream.flush();
            fbw.close();
            fstream.close();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return temp;
        
    }

    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboStartup;
    private javax.swing.JCheckBox checkCache;
    private javax.swing.JCheckBox checkDatabase;
    private javax.swing.JCheckBox checkVault;
    private javax.swing.JCheckBox chekcDownloadRB;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtAuteur;
    private javax.swing.JTextField txtPackage;
    private javax.swing.JTextField txtPlugin;
    private javax.swing.JTextField txtVersion;
    // End of variables declaration//GEN-END:variables
}
